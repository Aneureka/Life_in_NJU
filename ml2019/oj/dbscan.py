# encoding=utf8
import numpy as np
import random
import queue
from matplotlib import pyplot
from mpl_toolkits.mplot3d import Axes3D


# 寻找EPS邻域内的点
def findNeighbor(j, X, eps):
    N = []
    for p in range(X.shape[0]):  # 找到所有领域内对象
        temp = np.sqrt(np.sum(np.square(X[j] - X[p])))  # 欧氏距离
        if temp <= eps:
            N.append(p)
    return N


# dbscan算法
def dbscan(X, eps, min_Pts):
    '''
    input:X(ndarray):样本数据
          eps(float):eps邻域半径
          min_Pts(int):eps邻域内最少点个数
    output:cluster(list):聚类结果
    '''
    # ********* Begin *********#
    N = X.shape[0]
    core_objects = set()
    for i in range(N):
        if len(findNeighbor(i, X, eps)) >= min_Pts:
            core_objects.add(i)
    k = 0
    cluster = np.zeros(N)
    unvisited_set = core_objects.copy()
    while len(core_objects) > 0:
        old_unvisited_set = unvisited_set.copy()
        o = core_objects.pop()
        o_queue = queue.Queue()
        o_queue.put(o)
        unvisited_set.remove(o)
        while not o_queue.empty():
            q = o_queue.get()
            if len(findNeighbor(q, X, eps)) >= min_Pts:
                delta = set(findNeighbor(q, X, eps)).intersection(unvisited_set)
                for d in delta:
                    o_queue.put(d)
                unvisited_set.difference_update(delta)
        ck = old_unvisited_set.difference(unvisited_set)
        k += 1
        cluster[list(ck)] = k
        core_objects.difference_update(ck)
    cluster = cluster.astype(int).tolist()
    # ********* End *********#
    return cluster


def plot(data):
    fig = pyplot.figure()
    ax = Axes3D(fig)
    ax.scatter(data[:, 0].tolist(), data[:, 1].tolist(), data[:, 1].tolist())
    pyplot.show()


if __name__ == '__main__':
    data = [[0.429769, -0.912921, 0.0],
     [0.309100, 0.515712, 1.0],
     [-0.956837, -0.269033, 0.0],
     [-0.492351, 0.367623, 1.0],
     [0.105023, -0.561485, 1.0],
     [0.186606, 0.978866, 0.0],
     [-0.198178, 0.989641, 0.0],
     [0.572574, -0.231750, 1.0],
     [-0.866670, -0.483097, 0.0],
     [-0.063069, -1.007621, 0.0],
     [0.978776, 0.133642, 0.0],
     [-0.524021, 0.274690, 1.0],
     [0.386785, 0.455168, 1.0],
     [0.202313, -0.574091, 1.0],
     [0.332618, -0.511874, 1.0],
     [0.572204, -0.142705, 1.0],
     [-0.430184, -0.420263, 1.0],
     [0.460807, -0.401791, 1.0],
     [1.009741, 0.012339, 0.0],
     [0.874577, 0.465875, 0.0],
     [-0.535289, 0.848941, 0.0],
     [0.589842, 0.061641, 1.0],
     [0.475981, -0.371150, 1.0],
     [-0.731261, 0.693158, 0.0],
     [-0.419443, -0.894847, 0.0],
     [-0.175878, -0.564483, 1.0],
     [0.250691, 0.539426, 1.0],
     [-0.527125, -0.849469, 0.0],
     [-0.876653, 0.457155, 0.0],
     [0.711798, 0.694116, 0.0],
     [-0.330738, 0.943361, 0.0],
     [-0.061499, 1.012284, 0.0],
     [-0.638028, -0.763933, 0.0],
     [0.286225, 0.948776, 0.0],
     [0.967430, -0.251460, 0.0],
     [-0.318184, 0.505902, 1.0],
     [-0.248824, -0.535447, 1.0],
     [-0.244897, 0.540403, 1.0],
     [0.633555, 0.757088, 0.0],
     [0.421654, 0.889679, 0.0],
     [-0.608767, -0.096347, 1.0],
     [0.580577, 0.162067, 1.0],
     [-0.158788, 0.564058, 1.0],
     [0.933576, 0.331344, 0.0],
     [-0.382638, 0.461751, 1.0],
     [0.266378, -0.545499, 1.0],
     [0.538992, -0.842008, 0.0],
     [-0.918230, -0.364233, 0.0],
     [0.378563, -0.448392, 1.0],
     [0.808340, -0.571517, 0.0],
     [-0.557459, 0.221376, 1.0],
     [0.312166, -0.946483, 0.0],
     [-0.430764, 0.408352, 1.0],
     [-0.324744, -0.489515, 1.0],
     [-0.808321, -0.584874, 0.0],
     [0.046332, -0.599085, 1.0],
     [-0.588824, 0.075710, 1.0],
     [-0.116663, -0.582159, 1.0],
     [0.812459, 0.593432, 0.0],
     [-1.009483, 0.003378, 0.0],
     [-0.494333, -0.352296, 1.0],
     [0.179578, -0.991679, 0.0],
     [0.044036, 0.573170, 1.0],
     [-0.582102, 0.153098, 1.0],
     [0.647106, -0.791781, 0.0],
     [0.189848, 0.578930, 1.0],
     [-0.303485, -0.957582, 0.0],
     [-0.967945, 0.124333, 0.0],
     [0.960891, 0.246634, 0.0],
     [0.914963, -0.379238, 0.0],
     [-0.417913, 0.902291, 0.0],
     [0.079034, -1.016049, 0.0],
     [0.518008, 0.308754, 1.0],
     [0.871190, -0.478338, 0.0],
     [-0.727753, -0.680082, 0.0],
     [-0.195631, -0.972571, 0.0],
     [-0.609246, 0.009510, 1.0],
     [0.524170, 0.837432, 0.0],
     [-0.579978, -0.126545, 1.0],
     [-0.528299, -0.309294, 1.0],
     [-0.031288, 0.621765, 1.0],
     [0.549159, 0.219395, 1.0],
     [-0.930905, 0.376030, 0.0],
     [-0.117633, 0.593138, 1.0],
     [0.526650, -0.301594, 1.0],
     [-0.987227, -0.130256, 0.0],
     [-0.647972, 0.772981, 0.0],
     [-0.970027, 0.243347, 0.0],
     [-0.807805, 0.588020, 0.0],
     [-0.561295, -0.224111, 1.0],
     [0.714154, -0.665016, 0.0],
     [-0.064372, -0.597504, 1.0],
     [0.989397, -0.134881, 0.0],
     [0.472674, 0.349939, 1.0],
     [0.064577, 0.981855, 0.0],
     [0.593083, -0.012365, 1.0],
     [0.590181, -0.063071, 1.0],
     [-0.371665, -0.451527, 1.0],
     [0.104273, 0.586017, 1.0],
     [0.440976, 0.431757, 1.0],
     [1.388393, 1.498712, 2.0],
     [1.462164, 1.451886, 2.0],
     [1.348267, 1.450913, 2.0],
     [1.500111, 1.471046, 2.0],
     [1.475932, 1.435205, 2.0]]
    data = np.array(data)
    eps = 0.2
    minPts = 4
    plot(data)
    print(dbscan(data, eps, minPts))

